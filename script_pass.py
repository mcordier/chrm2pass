#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2016 Daniele Pizzolli <daniele.pizzolli@create-net.org>
#
# This file is licensed under GPLv2+. Please see COPYING for more
# information.

"""Import password(s) exported by Password Exporter for Firefox in
csv format to pass format.  Supports Password Exporter format 1.1.
"""

import argparse
import base64
import csv
import sys
import subprocess
import pandas as pd

PASS_PROG = 'pass'
DEFAULT_USERNAME = 'login'


def main():
    """\
    Import password(s) exported by Password Exporter for Firefox in csv
    format to pass format.  Supports Password Exporter format 1.1.

    Check the first line of your exported file.

    Must start with:

    # Generated by Password Exporter; Export format 1.1;

    Support obfuscated export (wrongly called encrypted by Password Exporter).

    It should help you to migrate from the default Firefox password
    store to passff.

    Please note that Password Exporter or passff may have problem with
    fields containing characters like " or :.

    More info at:
    <https://addons.mozilla.org/en-US/firefox/addon/password-exporter>
    <https://addons.mozilla.org/en-US/firefox/addon/passff>
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "filepath", type=str,
        help="The password Exporter generated file")
    parser.add_argument(
        "-p", "--prefix", type=str,
        help="Prefix for pass store path, you may want to use: sites")
    parser.add_argument(
        "-d", "--force", action="store_true",
        help="Call pass with --force option")
    parser.add_argument(
        "-v", "--verbose", action="store_true",
        help="Show pass output")
    parser.add_argument(
        "-q", "--quiet", action="store_true",
        help="No output")

    args = parser.parse_args()

    passimport(args.filepath, prefix=args.prefix, force=args.force,
               verbose=args.verbose, quiet=args.quiet)


def passimport(filepath, prefix=None, force=False, verbose=False, quiet=False):
    df = pd.read_csv(filepath)
    for row in df.to_dict('records'):
        username = row['username']
        password = row['password']
        name = row['name']
        url = row['url']

        # Remove the protocol prefix for http(s)
        if name == '':
            name = url.replace(
            'https://', '').replace('http://', '')

        text = '{}\n'.format(password)
        if username:
            text += '{}: {}\n'.format(
                row.get('usernameField', DEFAULT_USERNAME), username)
        if name:
            text += 'Hostname: {}\n'.format(name)
        if url:
            text += 'httpRealm: {}\n'.format(url)

        # Rough protection for fancy username like “; rm -Rf /\n”
        storepath = prefix + "/" + str(name) + "/" + str(username)
        cmd = [PASS_PROG, 'insert', '--multiline']
        cmd.append(storepath)
        proc = subprocess.Popen(
            cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate(input=str.encode(text))
        retcode = proc.wait()
        print("okay ---  " + prefix + "/" + str(name) + "/" + str(username))
if __name__ == '__main__':
    main()